<?xml version="1.0"?>
<project xmlns:j="jelly:core" 
         xmlns:util="jelly:util"
         xmlns:maven="jelly:maven"
         xmlns:define="jelly:define"
         xmlns:dalma="dalma"
         xmlns:g="genapp">

  <define:taglib uri="dalma">
    <define:tag name="copy-artifacts">
      <!-- include dependency jars -->
      <j:forEach var="lib" items="${pom.artifacts}">
        <j:set var="dep" value="${lib.dependency}"/>
        <j:if test="${dep.getProperty('dar.bundle')=='true'}">
          <fileset file="${lib.path}" />
        </j:if>
      </j:forEach>
      <!-- additional files given -->
      <j:if test="${context.getVariable('maven.jar.includes') != null}">
        <setProperty name="includes" value="${maven.jar.includes}" />
      </j:if>
    </define:tag>
  </define:taglib>


  <!-- =============================
       PLUG-IN GOALS
       ============================= -->
  <goal name="dalma"
        prereqs="dalma:dar"
        description="Build dalma archive for distribution" />

  <goal name="dalma:dar"
        prereqs="java:compile"
        description="Build dalma archive for distribution">
    
    <jar
      jarfile="${maven.build.dir}/${maven.dalma.final.name}"
      basedir="${maven.build.dest}"
      compress="${maven.jar.compress}"
      excludes="${maven.jar.excludes}">
      <manifest>
        <attribute name="Dalma-Main-Class" value="${maven.dalma.mainclass}" />
      </manifest>
      <dalma:copy-artifacts />
    </jar>
  </goal>

  <goal name="dalma:genapp"
        description="Generate a new dalma workflow application (like 'genapp' goal)">
    <g:generate maven.genapp.template.dir="${plugin.resources}/genapp-template" />
  </goal>

  <goal name="dalma:run"
        prereqs="java:compile"
        description="run this workflow application">
    <!-- copy files -->
    <j:set var="base" value="${maven.build.dir}/dalma-test/apps/${pom.artifactId}" />
    <mkdir dir="${base}" />
    <copy todir="${base}">
      <dalma:copy-artifacts />
    </copy>

    <taskdef name="dalmaRunner" classname="dalma.ant.Runner">
      <classpath>
        <j:forEach var="lib" items="${plugin.artifacts}">
          <pathelement path="${lib.path}" />
        </j:forEach>
      </classpath>
    </taskdef>

    <!--
      run the application in the test harness.
      it's important to use @parentfirst='false' because many users
      set CLASSPATH to include build artifacts, and running Ant on
      such a shell would load those classes in the main ant classloader,
      which won't be instrumented.
    -->
    <dalmaRunner
        mainClass="${maven.dalma.mainclass}"
        workdir="${maven.build.dir}/dalma-test"
        parentfirst="false">

      <classpath>
        <pathelement path="${maven.build.dest}" />
        <j:forEach var="lib" items="${pom.artifacts}">
          <j:set var="dep" value="${lib.dependency}"/>
          <j:if test="${dep.getProperty('dar.bundle')=='true'}">
            <fileset file="${lib.path}" />
          </j:if>
        </j:forEach>
      </classpath>
    </dalmaRunner>
  </goal>
</project>