<document>
<properties>
  <title>Tutorial</title>
</properties>
<body>
<p>
  This document explains how you can write a workflow application quickly by using Dalma.
</p>

<section name="Set up a workspace">
  <p>
    First, <a href="https://dalma.dev.java.net/servlets/ProjectDocumentList">download a binary distribution</a> and then copy all the jars in the top-directory to your workspace. Those jar files are necessary to run Dalma engine.
  </p>
  <p>
    A workflow engine isn't very interesting unless it can talk to other systems. In Dalma, they are called "endpoints" (<a href="endpoint.html">more details</a>), and Dalma ships with several of them. In this tutorial, we'll be using the e-mail endpoint (<a href="dalma-endpoint-email/index.html">more details</a>), so let's also copy all the jars from the <tt>email</tt> directory as well.
  </p>
  <p>
    To complete the set up step, we'll create an empty entry routine like this:
  </p>
<source>
package foo;

public class Main {
  public static void main(String[] args) {
    // nothing yet
  }
}
</source>
</section>
<section name="Create workflow engine">
  <p>
    The next thing we'll do is to set up a workflow engine. First, we create a new <tt>Engine</tt> instance like this:
  </p>
<source>
Engine engine = EngineFactory.newEngine("foo.workflow.");
</source>
  <p>
    <tt>Engine</tt> object represents a running workflow engine instance. It creates "./dalma" directory and uses it to persist the state of the running "conversations", which are the programs running inside the engine. If you already have persisted conversations in this directory (for example you've stopped the VM while running conversations and restarted it later), then those conversations will be automatically picked up by the new engine instance.
  </p>
  <p>
    The parameter "foo.workflow." indicates the package name that we'll be using to write conversations. To transparently suspend and persist running conversations, Dalma relies on bytecode instrumentation (<a href="instrumentation.html">more details</a>.) For now, we'll isolate the conversation code into one package and use runtime instrumentation.
  </p>
  <p>
    This instantiation is the simplest possible way you can construct an engine. If you need more control, check <a href="apidocs/index.html?dalma/EngineFactory.html">EngineFactory documentation</a>.
  </p>
</section>
<section name="Set up endpoints">
  <p>
    Next, we'll add endpoints to an engine, like this:
  </p>
<source>
EmailEndPoint eep = (EmailEndPoint)engine.addEndPoint("endPoint1","smtp://hangman@kohsuke.org!pop3://username:password@mail.kohsuke.org");
</source>
  <p>
    The first parameter is the name of a newly added endpoint. Endpoints are identified by their name inside an engine. Persisted conversations use names to connect back to endpoints when they are resumed.
  </p><p>
    The second parameter is an endpoint URL (<a href="endpointURL.html">more info</a>) that captures the configuration of an endpoint in one string. This somewhat ugly string is convenient because in most cases endpoint configurations are highly environment-dependent and therefore you don't want to hard-code them in your program.
  </p><p>
    You can also choose to create endpoints programatically, or you can use Spring, Groovy, and etc to configure endpoints. See <a href="configure.html">this document</a> for more details.
  </p><p>
    For e-mail endpoint, we need one more configuration; we need to tell it what we want to do when the endpoint sees a new incoming e-mail that is not related to any of the running conversations. We do this by the following code. We'll fill this part later:
  </p>
<source>
eep.setNewMailHandler(new NewMailHandler() {
  public void onNewMail(MimeMessage mail) {
    ;
  }
});
</source>
</section>
<section name="Start engine">
  <p>
    We are done with the configuration, so let's start the engine.
  </p>
<source>
engine.start();
</source>
  <p>
    Engine doesn't run and endpoints won't accept incoming messages until you invoke the <tt>start</tt> method. This prevents the synchronization problem --- you don't want a part of the engine to start accepting incoming messages before you prepare the other part of the engine.
  </p><p>
    Engine runs asynchronously by using other threads, so this method call returns immediately. The main thread can do anything it wants at this point, but in this tutorial I just let the main thread exit by returning from the main method. Since engine has its own thread, the JVM will keep running in this way (if you really wanted to shut down the JVM, you can invoke <tt>Engine.stop()</tt> method.
  </p>
</section>
<section name="Write a simple workflow">
  <p>
    Now we are ready to write a workflow program. Let's write a simple one that just keep replying to the user's message.
  </p>
<source>
package foo.workflow;
import ...;

public class MyWorkflow implements Runnable, Serializable {
  // initial message received
  private MimeMessage msg;
  
  private final EmailEndPoint eep;
  
  public MyWorkflow(EmailEndPoint eep, MimeMessage msg) {
    this.eep = eep;
    this.msg = msg;
  }
  
  public void run() {
    // decide when to stop this workflow. one day from now
    Calendar cal = new GregorianCalendar();
    cal.add(DATE,1);
    Date dt = cal.getTime();
    
    int counter = 0; // pointless counter
    
    do {
        // create a reply message
        msg = msg.reply(false);
        msg.setText(String.valueOf(counter));
        
        // send it and wait for a reply
        msg = eep.waitForReply(msg,dt);
    } while(msg!=null);
  }
}
</source>
  <p>
    A workflow program is simply a <tt>Runnable</tt> object. The <tt>run</tt> method is invoked by the engine, and when this method returns the conversation ends. There will be one instance of this per one running workflow instance (which is called "conversation".)
    It also needs to implement <tt>Serializable</tt>, because when a conversation is suspended, its state is persisted to a disk by using Java serialization.
  </p><p>
    We'll start this conversation when a fresh message is received, so the constructor takes the first message received. The workflow immediately replies to a received message, and waits for the sender to further reply. When your conversation blocks, the engine actually persists its state to disk, and remove your conversation from memory. The Java thread that run it will be used to run other conversations. But this all happens behind the scene, and except for the fact that your objects need to be serializable, this is largely transparent.
  </p><p>
    When a reply is received, your conversation is resumed, and execution returns normally from the <tt>waitForReply</tt> method with a non-null return value. The conversation sends out another reply, and waits for a further reply.
  </p><p>
    Eventually time elapses, and when one day passes, the <tt>waitForReply</tt> method will return with null. At this point the run method exits, and the conversation is considered complete.
  </p>
</section>
<section name="New mail handler">
  <p>
    Finally, we come back to the new mail handler. When an e-mail that is not a reply to any of the running conversations is received by an e-mail endpoint, it's passed to the new mail handler. In this tutorial, we'll simply create a new conversation into the engine.
  </p>
<source>
eep.setNewMailHandler(new NewMailHandler() {
  public void onNewMail(MimeMessage mail) {
    engine.createConversation(MyWorkflow.class, eep, msg);
  }
});
</source>
</section>
<section name="Run">
  <p>
    That's it. Run this program, and see for yourself that the workflow replies to your e-mail. You can even kill the JVM, restart it, and see that the engine still remembers your running conversations, as if nothing has happened.
  </p><p>
    You can also run this program under the debugger. You can set breakpoints, inspect variables, and pretty much everything works normally. Now you got your first working dalma workflow.
  </p><p>
    <b>TODO: complete source code in a zip file</b>
  </p>
</section>
</body>
</document>