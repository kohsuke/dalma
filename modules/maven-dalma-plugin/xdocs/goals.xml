<?xml version="1.0" encoding="UTF-8"?>
<document>
<properties>
  <title>Maven dalma plugin Goals</title>
</properties>
<body>
  <section name="dalma:dar goal">
    <p>
      This goal builds a dalma archive (<a href="../container/dar.html">.dar</a>) for the project. This mostly works in the same way as the <tt>jar</tt> goal --- it puts the same resources and class files as with the <tt>jar</tt> goal, it puts the same additional files specified by the <a href="http://maven.apache.org/maven-1.x/reference/plugins/jar/properties.html"><tt>maven.jar.includes</tt></a> property.
    </p><p>
      In addition to those files, this goal supports the following two features:
    </p>
    <ol>
      <li>
        Puts <a href="../container/dar.html">the <tt>Dalma-Main-Class</tt> attribute</a> to the manifest, as specified by the <a href="properties.html">maven.dalma.mainclass</a> property.
      </li>
      <li>
        If dependency jar files in the manifest has <tt>dar.bundle</tt> property as follows, bundle those jar file s in the generated dar file. This makes it easy to redistribute libraries that your workflow application uses.
      </li>
<source>
&lt;dependency>
  &lt;groupId>dalma&lt;/groupId>
  &lt;artifactId>dalma-endpoint-email&lt;/artifactId>
  &lt;version>1.0&lt;/version>
  &lt;properties>
    &lt;dar.bundle>true&lt;/dar.bundle>
  &lt;/properties>
&lt;/dependency>
</source>
    </ol>
  </section>
  <section name="dalma:genapp goal">
    <p>
      This goal works like <a href="http://maven.apache.org/maven-1.x/start/ten-minute-test.html">the genapp goal</a>, and produces a skeleton of a new workflow project into the current directory.
    </p><p>
      This is a handy goal when you are starting a new workflow applciation. It creates <tt>project.xml</tt> and a few other files.
    </p>
  </section>
  <section name="dalma:run goal">
    <p>
      This goal uses <a href="../ant-tasks/dalmaRunner.html">&lt;dalmaRunner> ant task</a> to run your current workflow application project. This is handy when you are debugging it.
    </p>
    <p>
      To attach a debugger, run Maven with JPDA enabled, as follows:
    </p>
<source>
$ export MAVEN_OPTS="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,address=8000"
$ maven dalma:run
</source>
    <p>
      This goal consults the <tt>maven.dalma.mainclass</tt> property for the main Program class. Dependencies marked with <tt><![CDATA[<dar.bundle>true</dar.bundle>]]></tt> will be passed as a classpath to the dalmaRunner ant task, therefore they become a subject to the byte code instrumentation.
    </p><p>
      Maven properties that start with prefix "dalma.test." will be passed as properties and used to configure resources. For example, a property <tt>dalma.test.xyz=5</tt> will be used to inject "5" into a field <tt>@Resource int xyz;</tt>.
    </p>
  </section>
  <section name="dalma:deploy goal">
    <p>
      This goal uses <a href="../ant-tasks/dalmaDeployer.html">&lt;dalmaDeployer> ant task</a> to deploy your current workflow application to a remote dalma <a href="../webui/index.html">webui</a>.
    </p><p>
      This task builds a dar file by running the <tt>dalma:dar</tt> goal, and then deploys this dar file to the URL specified by the <tt>maven.dalma.webui.url</tt> property.
    </p>
  </section>
</body>
</document>